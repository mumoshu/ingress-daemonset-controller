kind: IngressDaemonSet
apiVersion: ingressdaemonsets.mumoshu.github.io/v1alpha1
metadata:
  name: nginx-ingress
  labels:
    app: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    kubernetes.io/cluster-service: "true"
spec:
  # NEW: 2 pods per node (See below)
  podsPerNode: 2

  # NEW: The host/node port to be used for responding health-check http requests from the external load balancer
  healthCheckNodePorts:
  - 10081
  - 10082

  updateStrategy:
    # Has different meaning and options than standard DaemonSet (See below)
    type: RollingUpdate
    rollingUpdate:
      # If this is greater than or equal to 1, the controller communicates with node-detacher to detach the node
      # and makes the node unavailable to the external lb before updating pods on the node
      #
      # If this is set, `maxUnavaiablePodsPerNode` is automatically set to `100%` and `maxDegradedNodes` must be `0`,
      # which means the controller updates all the pods in a node concurrently after detaching the node from external lb, which is safe and can be faster than the other method.
      #
      # The default value is 0, which means it relies on maxUnavaiablePodsPerNode and maxDegaradedNodes only.
      maxUnavailableNodes: 2

      # The controller runs rolling-update of pods up to 3 pods on the node
      maxUnavaiablePodsPerNode: 3

      # maxSurgedPodsPerNode is the maxSurge for the per-node deployment
      maxSurgedPodsPerNode: 1

      # The controller runs rolling-updates of currently on and pods up to 3 nodes.
      # The default is 1. You can only set either of `maxUnavaiableNodes` or `maxDegradedNodes` to 1 or greater.
      maxDegradedNodes: 3

      # The controller annotates the per-node deployment to start failing health-checks from the external lb
      # even before any pod gets replaced. 
      #annotateDeploymentToDetach:
      #  key: "ingressdaemonsets.mumoshu.github.com/to-be-updated"
      #  gracePeriodSeconds: 10

      # annotateNodeToDetach configures the controller to annotate the node before updating pods scheduled onto the node.
      # It can either be (1) annotation key or (2) annotation key=value.
      # When the first option is used, the controller annotate the node with the specified key, without an empty value.
      annotateNodeToDetach:
        key: "node-detacher.variant.run/detached"
        value: "true"
        gracePeriodSeconds: 10

      # waitForDetachmentByAnnotatedTimestamp configures the controller to wait for the certain period since the detachment
      # timestamp stored in the specified annotation.
      # This depends on and requires configuring AnnotateNodeToDetach, too.
#      waitForDetachmentByAnnotatedTimestamp:
#        key: "node-detacher.variant.run/detachment-timestamp"
#        format: RFC3339
#        gracePeriodSeconds: 30
  healthChecker:
    image: mumoshu/ingress-daemonset-controller:latest
    imagePullPolicy: Always
    serviceAccountName: default
  template:
    metadata:
      labels:
        app: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
    spec:
      nodeSelector:
        ingress-controller-node: "true"
      hostNetwork: true
      terminationGracePeriodSeconds: 300
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.26.2
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: http
            containerPort: 80
            hostPort: 80
          - name: https
            containerPort: 443
            hostPort: 443